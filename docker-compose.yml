version: '3'

services:
  postgres:
    image: postgres:13
    restart: unless-stopped
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: "pg_isready --username=postgres && psql --password=password --list"
      timeout: 10s
      retries: 20
    volumes:
      - db:/var/lib/postgresql/data
      - ./sql/create_db.sql:/docker-entrypoint-initdb.d/00_create_db.sql
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/01_create_tables.sql

  airflow-init:
    build:
      context: .
      dockerfile: ./Dockerfile.airflow
    entrypoint: |
      /bin/bash -c \
      "airflow db init && \
       airflow users create --username admin --password admin --firstname Air --lastname Flow --role Admin --email admin@example.com"
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    depends_on:
      - postgres

  airflow-webserver:
    build:
      context: .
      dockerfile: ./Dockerfile.airflow
    restart: always
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY:-myfernetkey}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET}
      DB_URI: ${DB_URI}
      ENV: ${ENV}
    volumes:
      - ./dags:/opt/airflow/dags
    ports:
      - "8080:8080"
    command: "airflow webserver"

  airflow-scheduler:
    build:
      context: .
      dockerfile: ./Dockerfile.airflow
    restart: always
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY:-myfernetkey}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET}
      DB_URI: ${DB_URI}
      ENV: ${ENV}
    volumes:
      - ./dags:/opt/airflow/dags
    command: "airflow scheduler"

volumes:
  db:
